{
    "definition": {
        "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
        "actions": {
            "For_each_email_address": {
                "type": "Foreach",
                "foreach": "@split(appsetting('ErrorEmailToAddresses'),',')",
                "actions": {
                    "Send_email": {
                        "type": "Http",
                        "inputs": {
                            "uri": "@{parameters('EmailAzureFunctionEndpoint')}",
                            "method": "POST",
                            "body": {
                                "apiKey": "@{triggerBody().apiKey}",
                                "personalisations": {
                                    "fail_body": "@{concat(triggerBody().progressText, ': ', outputs('Strip_sensitive_data'))}",
                                    "fail_run_link": "@{concat('https://portal.azure.com/#blade/Microsoft_Azure_EMA/DesignerEditor.ReactView/id/', encodeUriComponent(concat('/subscriptions/',appsetting('WORKFLOWS_SUBSCRIPTION_ID'), '/resourceGroups/', appsetting('WORKFLOWS_RESOURCE_GROUP_NAME'),'/providers/Microsoft.Web/sites/',appsetting('WORKFLOWS_LOGIC_APP_NAME'),'/workflows/',triggerBody().callingWorkflowName)),'/location/',appsetting('WORKFLOWS_LOCATION_NAME'),'/isReadOnly/true/isMonitoringView/true/runId/',triggerBody().workflowRunId)}",
                                    "process_name": "RleCrmInsert"
                                },
                                "templateId": "9cf49f31-d557-4a78-beeb-27fe87553ae7",
                                "toAddress": "@{item()}"
                            }
                        },
                        "runtimeConfiguration": {
                            "contentTransfer": {
                                "transferMode": "Chunked"
                            }
                        }
                    }
                },
                "runAfter": {
                    "Strip_sensitive_data": [
                        "SUCCEEDED"
                    ]
                }
            },
            "Get_error_stack": {
                "type": "Query",
                "inputs": {
                    "from": "@triggerBody()?['stack']",
                    "where": "@equals(item()?['status'],'Failed')"
                },
                "runAfter": {},
                "runtimeConfiguration": {
                    "secureData": {
                        "properties": [
                            "inputs",
                            "outputs"
                        ]
                    }
                }
            },
            "Response": {
                "type": "Response",
                "kind": "Http",
                "inputs": {
                    "statusCode": 200
                },
                "runAfter": {
                    "For_each_email_address": [
                        "SUCCEEDED"
                    ]
                }
            },
            "Strip_sensitive_data": {
                "type": "JavaScriptCode",
                "inputs": {
                    "code": "// This code snippet removes any sensitive token values if defined\n\n// List of tokens with their terminating char - defined in pairs\nvar sensitiveTokens = [ 'client_secret=', '&', 'client_id=', '&', 'Authorization', '}' ];\nvar errorStack = JSON.stringify(workflowContext.actions.Get_error_stack.outputs);\ntry {\n    for (var i=0; i < sensitiveTokens.length; i = i + 2) {\n        var tok = sensitiveTokens[i];\n        var tokLen = tok.length;\n        var tokPos = errorStack.indexOf(tok);\n        var endPos = errorStack.indexOf(sensitiveTokens[i+1],tokPos + 1);\n        if (tokPos > -1) {\n            if (endPos > -1) {\n                errorStack = errorStack.substring(0, tokPos + tokLen) +\n                    '******' +\n                    errorStack.substring(endPos);\n            } else {\n                errorStack = errorStack.substring(0, tokPos + tokLen) +\n                    '******';\n            }\n        }\n    }\n}\ncatch (err) {\n  // Do nothing\n}\nreturn errorStack;"
                },
                "runAfter": {
                    "Get_error_stack": [
                        "SUCCEEDED"
                    ]
                },
                "runtimeConfiguration": {
                    "secureData": {
                        "properties": [
                            "inputs"
                        ]
                    }
                }
            }
        },
        "contentVersion": "1.0.0.0",
        "outputs": {},
        "parameters": {
            "AdLoginBaseUrl": {
                "type": "String",
                "value": "@appsetting('AdLoginBaseUrl')",
                "defaultValue": "@appsetting('AdLoginBaseUrl')"
            },
            "CrmBaseUrl": {
                "type": "String",
                "value": "@appsetting('CrmBaseUrl')",
                "defaultValue": "@appsetting('CrmBaseUrl')"
            },
            "EmailAzureFunctionEndpoint": {
                "type": "String",
                "value": "@appsetting('EmailAzureFunctionEndpoint')",
                "defaultValue": "@appsetting('EmailAzureFunctionEndpoint')"
            },
            "ErrorEmailTempateId": {
                "type": "String",
                "value": "@appsetting('ErrorEmailTempateId')",
                "defaultValue": "@appsetting('ErrorEmailTempateId')"
            },
            "FfcRetrievalWorkflowSasToken": {
                "type": "String",
                "value": "@appsetting('FfcRetrievalWorkflowSasToken')",
                "defaultValue": "@appsetting('FfcRetrievalWorkflowSasToken')"
            },
            "FfcRetrievalWorkflowEndpoint": {
                "type": "String",
                "value": "@appsetting('FfcRetrievalWorkflowEndpoint')",
                "defaultValue": "@appsetting('FfcRetrievalWorkflowEndpoint')"
            },
            "GovNotifyApiKey": {
                "type": "String",
                "value": "@appsetting('GovNotifyApiKey')",
                "defaultValue": "@appsetting('GovNotifyApiKey')"
            },
            "PdfServiceUrl": {
                "type": "String",
                "value": "@appsetting('PdfServiceUrl')",
                "defaultValue": "@appsetting('PdfServiceUrl')"
            },
            "PortalClientId": {
                "type": "String",
                "value": "@appsetting('PortalClientId')",
                "defaultValue": "@appsetting('PortalClientId')"
            },
            "PortalClientSecret": {
                "type": "String",
                "value": "@appsetting('PortalClientSecret')",
                "defaultValue": "@appsetting('PortalClientSecret')"
            },
            "PortalTenantId": {
                "type": "String",
                "value": "@appsetting('PortalTenantId')",
                "defaultValue": "@appsetting('PortalTenantId')"
            },
            "SharepointBaseUrl": {
                "type": "String",
                "value": "@appsetting('SharepointBaseUrl')",
                "defaultValue": "@appsetting('SharepointBaseUrl')"
            },
            "SharepointClientId": {
                "type": "String",
                "value": "@appsetting('SharepointClientId')",
                "defaultValue": "@appsetting('SharepointClientId')"
            },
            "SharepointClientSecret": {
                "type": "String",
                "value": "@appsetting('SharepointClientSecret')",
                "defaultValue": "@appsetting('SharepointClientSecret')"
            },
            "SharepointDomain": {
                "type": "String",
                "value": "@appsetting('SharepointDomain')",
                "defaultValue": "@appsetting('SharepointDomain')"
            },
            "SharepointLoginBaseUrl": {
                "type": "String",
                "value": "@appsetting('SharepointLoginBaseUrl')",
                "defaultValue": "@appsetting('SharepointLoginBaseUrl')"
            },
            "SharepointSiteSubPath": {
                "type": "String",
                "value": "@appsetting('SharepointSiteSubPath')",
                "defaultValue": "@appsetting('SharepointSiteSubPath')"
            },
            "SharepointTenantId": {
                "type": "String",
                "value": "@appsetting('SharepointTenantId')",
                "defaultValue": "@appsetting('SharepointTenantId')"
            },
            "UnknownContactId": {
                "type": "String",
                "value": "@appsetting('UnknownContactId')",
                "defaultValue": "@appsetting('UnknownContactId')"
            }
        },
        "triggers": {
            "When_a_HTTP_request_is_received": {
                "type": "Request",
                "kind": "Http",
                "inputs": {
                    "schema": {
                        "properties": {
                            "apiKey": {
                                "type": "string"
                            },
                            "callingWorkflowName": {
                                "type": "string"
                            },
                            "progressText": {
                                "type": "string"
                            },
                            "stack": {
                                "type": "array"
                            },
                            "workflowRunId": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "method": "POST"
                },
                "runtimeConfiguration": {
                    "secureData": {
                        "properties": [
                            "inputs",
                            "outputs"
                        ]
                    }
                }
            }
        }
    },
    "kind": "Stateful"
}